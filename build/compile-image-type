#!/usr/bin/env node 

const camelCase = require("camelcase");
const { dirname } = require("path");
const { readFileSync, 
        writeFileSync, 
        mkdirSync } = require("fs");


const types = JSON.parse(
  readFileSync("src/types.json", "utf8")
);

let enumFields = "", decls = "";
let imageTypeToTagMapFields = "",
    tagToImageTypeMapFields = "",
    imageTypeToDisplayNameMapFields = "",
    displayNameToImageTypeMapFields = "";
let firstElement = true;

const chars = "abcdefghijklmnopqrstuvwxyz";
const base = (num) => {
  var ret = "", base = chars.length;
  num++;
  do {
      num--;
      ret += chars[num % base];
      num = Math.floor(num / base);
  } while (num > 0);
  return ret;
};
let vname = 0;

for (let i in types) {
    const type = types[i];
    const enumName = camelCase(type.displayName, { pascalCase: true });
    const ccName = camelCase(type.displayName, { pascalCase: false });
    
    if (!firstElement) {
      enumFields += ",\n";
    }
      
    enumFields += ` ${enumName} = ${i}`;
    
    if (!firstElement) {
      decls += "\n";
    }
    
    const displayNameVarName = base(vname++),
          tagVarName = base(vname++);
    
    decls += `const ${displayNameVarName}: string = "${type.displayName}";
const ${tagVarName}: string = "${type.tag}";`;

    if (!firstElement) {
      imageTypeToTagMapFields += ",\n";
      tagToImageTypeMapFields += ",\n";
      imageTypeToDisplayNameMapFields += ",\n";
      displayNameToImageTypeMapFields += ",\n";
    }

    imageTypeToTagMapFields += `  [ImageType.${enumName}]: ${tagVarName}`;
    tagToImageTypeMapFields += `  [${tagVarName}]: ImageType.${enumName}`;
    imageTypeToDisplayNameMapFields += `  [ImageType.${enumName}]: ${displayNameVarName}`;
    displayNameToImageTypeMapFields += `  [${displayNameVarName}]: ImageType.${enumName}`;
    
    firstElement = false;
}

let code = `export const enum ImageType { // number defines order
${enumFields}
}

type ImageTypeMap = {
  [P in ImageType]: string;
};

type InverseImageTypeMap = {
  [key: string]: ImageType;
};

${decls}

export const imageTypeToTagMap: ImageTypeMap = {
${imageTypeToTagMapFields}
};

export const tagToImageTypeMap: InverseImageTypeMap = {
${tagToImageTypeMapFields}
};

export const imageTypeToDisplayNameMap: ImageTypeMap = {
${imageTypeToDisplayNameMapFields}
};

export const displayNameToImageTypeMap: InverseImageTypeMap = {
${displayNameToImageTypeMapFields}
};

`;

const write = ( path, data ) => {
  mkdirSync(dirname(path), { 
    recursive: true 
  });
  
  writeFileSync(path, data);
}

write("generated/ts/model/image-type.ts", code);
